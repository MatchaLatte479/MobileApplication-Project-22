import 'package:flutter/material.dart';
import 'calculator.dart';

class EvaluationPage extends StatefulWidget {
  const EvaluationPage({Key? key}) : super(key: key);

  @override
  _SolarEvaluationState createState() => _SolarEvaluationState();
}

class _SolarEvaluationState extends State<EvaluationPage> {
  List<int?> answers = [null, null, null];
  bool showResult = false;
  String resultType = '';

  final List<String> questions = [
    "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?",
    "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
  ];

  final List<List<String>> options = [
    [
      "‡πÉ‡∏ä‡πà, ‡∏£‡∏±‡∏ö‡πÅ‡∏î‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏•‡∏≠‡∏î‡∏ß‡∏±‡∏ô",
      "‡∏û‡∏≠‡∏°‡∏µ‡πÅ‡∏î‡∏î‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏£‡πà‡∏°‡πÄ‡∏á‡∏≤‡∏ö‡πâ‡∏≤‡∏á",
      "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏î‡∏î ‡∏°‡∏µ‡∏£‡πà‡∏°‡πÄ‡∏á‡∏≤‡∏ï‡∏•‡∏≠‡∏î"
    ],
    ["‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3,500 ‡∏ö‡∏≤‡∏ó", "1,500 ‚Äì 3,500 ‡∏ö‡∏≤‡∏ó", "‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 1,500 ‡∏ö‡∏≤‡∏ó"],
    [
      "‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô",
      "‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô‡∏û‡∏≠ ‡πÜ ‡∏Å‡∏±‡∏ô",
      "‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏´‡∏ô‡∏±‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô"
    ],
  ];

  void evaluate() {
    if (answers.contains(null)) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠')),
      );
      return;
    }

    setState(() {
      showResult = true;
      int option1Count = answers.where((answer) => answer == 0).length;

      if (option1Count == 3) {
        resultType = 'good';
      } else if (option1Count >= 1) {
        resultType = 'medium';
      } else {
        resultType = 'low';
      }
    });
  }

  Widget _buildResult() {
    switch (resultType) {
      case 'good':
        return _buildGoodResult();
      case 'medium':
        return _buildMediumResult();
      case 'low':
        return _buildLowResult();
      default:
        return Container();
    }
  }

Widget _buildGoodResult() {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      // Frame 1: Main message with emoji
      Container(
        width: double.infinity,
        padding: const EdgeInsets.all(16),
        margin: const EdgeInsets.only(bottom: 12),
        decoration: BoxDecoration(
          color: Color(0xFF6DFFAC),
          borderRadius: BorderRadius.circular(15),
        ),
        child: Column(
          children: [
            Text(
              'üòç', 
              style: TextStyle(fontSize: 40),
            ),
            Text(
              "Solar Rooftop\n‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì!",
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.black,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),

      // Frame 2: Selected options
      Container(
        width: double.infinity,
        padding: const EdgeInsets.all(16),
        margin: const EdgeInsets.only(bottom: 12),
        decoration: BoxDecoration(
          color: Color(0xFFD9D9D9),
          borderRadius: BorderRadius.circular(15),
        ),
        child: Column(
          children: [
            _buildColoredOption(0, options[0][answers[0]!]),
            _buildColoredOption(1, options[1][answers[1]!]),
            _buildColoredOption(2, options[2][answers[2]!]),
          ],
        ),
      ),

      // Frame 3: Recommendations and button
      Container(
        width: double.infinity,
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Color(0xFF6DFFAC),
          borderRadius: BorderRadius.circular(15),
        ),
        child: Column(
          children: [
            const Text(
              "‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞ = ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤",
              style: TextStyle(fontSize: 14),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            const Text(
              "‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡πÄ‡∏Å‡∏¥‡∏ô 1,500 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô = ‡∏ô‡πà‡∏≤‡∏•‡∏á‡∏ó‡∏∏‡∏ô",
              style: TextStyle(fontSize: 14),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            const Text(
              "‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏î‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà = ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ",
              style: TextStyle(fontSize: 14),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Color(0xFFD9D9D9),
                foregroundColor: Colors.black,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 10),
              ),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => CalculatorPage()),
                );
              },
              child: const Text("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì solar cell", style: TextStyle(fontSize: 14)),
            ),
          ],
        ),
      ),
    ],
  );
}

Widget _buildMediumResult() {
  return Column(
    mainAxisSize: MainAxisSize.min,
    children: [
      // ‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 1: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å
      Container(
        width: double.infinity,
        padding: const EdgeInsets.all(16),
        margin: const EdgeInsets.only(bottom: 12),
        decoration: BoxDecoration(
          color: Color(0xFF95EDFF), // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
          borderRadius: BorderRadius.circular(15),
        ),
        child: Column(
          children: [
            Text(
              'üòä',
              style: TextStyle(fontSize: 40),
            ),
            Text(
              "‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ß‡πà‡∏≤ \n Solar Rooftop \n ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ô :)",
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.black,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),

      // ‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2: 3 ‡∏ä‡πâ‡∏≠‡∏¢‡∏™‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      Container(
        width: double.infinity,
        padding: const EdgeInsets.all(16),
        margin: const EdgeInsets.only(bottom: 12),
        decoration: BoxDecoration(
          color: Color(0xFFD9D9D9), // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô
          borderRadius: BorderRadius.circular(15),
        ),
        child: Column(
          children: [
            _buildColoredOption(0, options[0][answers[0]!]),
            _buildColoredOption(1, options[1][answers[1]!]),
            _buildColoredOption(2, options[2][answers[2]!]),
          ],
        ),
      ),

      // ‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 3: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
      Container(
        width: double.infinity,
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Color(0xFF6DFFAC), // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
          borderRadius: BorderRadius.circular(15),
        ),
        child: const Column(
          children: [
            Text(
              "‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞ = ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤",
              style: TextStyle(fontSize: 14),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 8),
            Text(
              "‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡πÄ‡∏Å‡∏¥‡∏ô 1,500 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô = ‡∏ô‡πà‡∏≤‡∏•‡∏á‡∏ó‡∏∏‡∏ô",
              style: TextStyle(fontSize: 14),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 8),
            Text(
              "‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏î‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà = ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ",
              style: TextStyle(fontSize: 14),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    ],
  );
}

  Widget _buildLowResult() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πâ‡∏≠‡∏¢‡∏™‡πå‡∏ó‡∏µ‡πà 1 (index 0) ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        // ‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 1: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(16),
          margin: const EdgeInsets.only(bottom: 12),
          decoration: BoxDecoration(
            color: Color(0xFFF67B83),
            borderRadius: BorderRadius.circular(15),
          ),
          child: Column(
            children: [
              Text(
                'üòê',
                style: TextStyle(fontSize: 40),
              ),
              Text(
                "‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤ \n ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö \n Solar Rooftop",
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),

        // ‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2: 3 ‡∏ä‡πâ‡∏≠‡∏¢‡∏™‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç)
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(16),
          margin: const EdgeInsets.only(bottom: 12),
          decoration: BoxDecoration(
            color: Color(0xFFD9D9D9),
            borderRadius: BorderRadius.circular(15),
          ),
          child: Column(
            children: [
              _buildColoredOption(0, options[0][answers[0]!]),
              _buildColoredOption(1, options[1][answers[1]!]),
              _buildColoredOption(2, options[2][answers[2]!]),
            ],
          ),
        ),

        // ‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 3: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Color(0xFF6DFFAC),
            borderRadius: BorderRadius.circular(15),
          ),
          child: const Column(
            children: [
              Text(
                "‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞ = ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤",
                style: TextStyle(fontSize: 14),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 8),
              Text(
                "‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡πÄ‡∏Å‡∏¥‡∏ô 1,500 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô = ‡∏ô‡πà‡∏≤‡∏•‡∏á‡∏ó‡∏∏‡∏ô",
                style: TextStyle(fontSize: 14),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 8),
              Text(
                "‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏î‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà = ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ",
                style: TextStyle(fontSize: 14),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ],
    );
  }

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πâ‡∏≠‡∏¢‡∏™‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
Widget _buildColoredOption(int questionIndex, String text) {
  bool isOption1Selected = answers[questionIndex] == 0;

  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 8),
    child: Row(
      mainAxisAlignment: MainAxisAlignment.start, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô start ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
      crossAxisAlignment: CrossAxisAlignment.center, // ‡∏à‡∏±‡∏î‡πÅ‡∏ô‡∏ß‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
      children: [
        Container(
          width: 24, // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö alignment
          alignment: Alignment.centerLeft, // ‡∏à‡∏±‡∏î‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ô container
          child: Container(
            width: 13, // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            height: 13, // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            decoration: BoxDecoration(
              color: isOption1Selected ? Color(0xFF31D176) : Color(0xFFEA1624),
              shape: BoxShape.circle, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°
            ),
          ),
        ),
        const SizedBox(width: 12),
        Expanded( // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å Flexible ‡πÄ‡∏õ‡πá‡∏ô Expanded ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠
          child: Text(
            text,
            style: TextStyle(
              fontSize: 16,
              color: isOption1Selected ? Colors.green[800] : Colors.red[800],
            ),
          ),
        ),
      ],
    ),
  );
}

  Widget _buildQuestionItem(int index) {
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        color: const Color(0xFFD9D9D9),
        borderRadius: BorderRadius.circular(20),
      ),
      padding: const EdgeInsets.all(12),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            "${index + 1}. ${questions[index]}",
            style: const TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          Column(
            mainAxisSize: MainAxisSize.min,
            children: List<Widget>.generate(
              options[index].length,
              (j) => Padding(
                padding:
                    const EdgeInsets.only(bottom: 8), // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡πâ‡∏≠‡∏¢‡∏™‡πå
                child: RadioListTile<int>(
                  title: Text(
                    options[index][j],
                    style: const TextStyle(fontSize: 16),
                  ),
                  value: j,
                  groupValue: answers[index],
                  onChanged: (value) {
                    setState(() {
                      answers[index] = value;
                    });
                  },
                  contentPadding: EdgeInsets.zero, // ‡∏•‡∏ö padding ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
                  dense: true,
                  visualDensity:
                      const VisualDensity(vertical: -4), // ‡∏ä‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildConfirmButton() {
    return Container(
      margin: const EdgeInsets.only(top: 0),
      child: ElevatedButton(
        onPressed: evaluate,
        style: ElevatedButton.styleFrom(
          backgroundColor: Color(0xFF31D176),
          foregroundColor: Colors.white,
          padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 12),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
        child: const Text("CONFIRM", style: TextStyle(fontSize: 14)),
      ),
    );
  }

  Widget _buildRetryButton() {
    return Container(
      margin: const EdgeInsets.only(top: 8),
      child: TextButton(
        onPressed: () {
          setState(() {
            showResult = false;
            answers = [null, null, null];
          });
        },
        child: const Text(
          "‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
          style: TextStyle(color: Colors.blue, fontSize: 14),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF5F5F5),
      appBar: AppBar(
        backgroundColor: Color(0xFFF5F5F5),
        title: const Text("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡∏ó‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Solar Rooftop ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
            style: TextStyle(fontSize: 16)),
      ),
      body: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            if (!showResult) ...[
              Expanded(
                child: ListView(
                  shrinkWrap: true,
                  children: [
                    _buildQuestionItem(0),
                    _buildQuestionItem(1),
                    _buildQuestionItem(2),
                  ],
                ),
              ),
              _buildConfirmButton(),
            ] else ...[
              Expanded(
                child: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      _buildResult(),
                      _buildRetryButton(),
                    ],
                  ),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}
